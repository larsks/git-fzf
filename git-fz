#!/bin/bash

# subcommands
# - edit
# - reword
# - pick

select_commit() {
	local no_show_diff
	no_show_diff=1

	while getopts d ch; do
		case $ch in
			d) no_show_diff=;;
			*) exit 2;;
		esac
	done
	shift $(( OPTIND - 1 ))

	git rev-list --no-merges --oneline "${2:-HEAD}" |
		fzf --reverse \
			--preview-label=DESCRIPTION \
			--preview="git show ${no_show_diff:+--name-status} {1} | bat --color always" \
			|
		awk '{print $1}' |
		xargs git rev-parse

	# We pass the commit through git rev-parse to get the
	# full commit id. This only matters when using
	# git_fz_view, because a short commit may match on
	# multiple repositories.
}

git_fz_edit() {
	select_commit "$@" |
	GIT_SEQUENCE_EDITOR='sed -i 1s/pick/edit/' xargs -IREV git rebase -i "REV^"
}

git_fz_reword() {
	select_commit "$@" |
	GIT_SEQUENCE_EDITOR='sed -i 1s/pick/reword/' xargs -IREV git rebase -i "REV^"
}

git_fz_pick() {
	select_commit "$@"
}

git_fz_view() {
	select_commit "$@" |
	xargs -ICOMMIT gh search commits --hash=COMMIT --json url |
	jq -r '.[0].url' |
	xargs xdg-open
}

select_branch() {
	refpattern=(refs/heads/)
	while getopts ra ch; do
		case $ch in
			r)	refpattern=(refs/remotes/);;
			a)	refpattern=(refs/remotes/ refs/heads);;
			*)	exit 2;;
		esac
	done
	shift $(( OPTIND - 1 ))
	git for-each-ref --format='%(refname:lstrip=2)' "${refpattern[@]}" |
		fzf \
			--preview-label=DESCRIPTION \
			--preview='git show --name-status {1} | bat --color always' \
			|
		awk '{print $1}'
}

git_fz_switch() {
	select_branch "$@" |
		xargs -r git checkout
}

cmd=$1
shift

case $cmd in
	edit|ed|goto|g)	git_fz_edit "$@"
		;;
	reword|re)	git_fz_reword "$@"
		;;
	pick|p)	git_fz_pick "$@"
		;;

	view|v)	git_fz_view "$@"
		;;

	switch|sw)	git_fz_switch "$@"
		;;

	*)	echo "Must select one of edit, reword, pick, view, switch" >&2
		exit 1
		;;
esac
